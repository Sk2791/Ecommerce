package com.ecommerce.shoppro.domain;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@Table(name = "orders") 
public class Order {
	 @Id 
	 @GeneratedValue(strategy = GenerationType.IDENTITY) 
	 private Long id; 
	 
	 private BigDecimal totalAmount; 
	 
	 private String status; // "PLACED", "SHIPPED", etc. 
	 
	 private LocalDateTime createdAt = LocalDateTime.now(); 
	 
	 @ManyToOne 
	 @JoinColumn(name = "user_id") 
	 private User user; 
	 
	 @OneToMany(mappedBy = "order", cascade = CascadeType.ALL) 
	 private List<OrderItem> orderItems;

	 public Order(Long id, BigDecimal totalAmount, String status, LocalDateTime createdAt, User user,
			List<OrderItem> orderItems) {
		super();
		this.id = id;
		this.totalAmount = totalAmount;
		this.status = status;
		this.createdAt = createdAt;
		this.user = user;
		this.orderItems = orderItems;
	 }

	 public Long getId() {
		 return id;
	 }

	 public void setId(Long id) {
		 this.id = id;
	 }

	 public BigDecimal getTotalAmount() {
		 return totalAmount;
	 }

	 public void setTotalAmount(BigDecimal totalAmount) {
		 this.totalAmount = totalAmount;
	 }

	 public String getStatus() {
		 return status;
	 }

	 public void setStatus(String status) {
		 this.status = status;
	 }

	 public LocalDateTime getCreatedAt() {
		 return createdAt;
	 }

	 public void setCreatedAt(LocalDateTime createdAt) {
		 this.createdAt = createdAt;
	 }

	 public User getUser() {
		 return user;
	 }

	 public void setUser(User user) {
		 this.user = user;
	 }

	 public List<OrderItem> getOrderItems() {
		 return orderItems;
	 }

	 public void setOrderItems(List<OrderItem> orderItems) {
		 this.orderItems = orderItems;
	 }

	 @Override
	 public String toString() {
		return "Order [id=" + id + ", totalAmount=" + totalAmount + ", status=" + status + ", createdAt=" + createdAt
				+ ", user=" + user + "]";
	 }

	 @Override
	 public int hashCode() {
		return Objects.hash(id);
	 }

	 @Override
	 public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Order other = (Order) obj;
		return Objects.equals(id, other.id);
	 } 
	 
	 
	 

}
