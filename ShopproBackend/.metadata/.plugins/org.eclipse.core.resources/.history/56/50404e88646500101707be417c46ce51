package com.ecommerce.shoppro.controller;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ecommerce.shoppro.domain.CartItem;
import com.ecommerce.shoppro.domain.Order;
import com.ecommerce.shoppro.domain.OrderItem;
import com.ecommerce.shoppro.domain.User;
import com.ecommerce.shoppro.repo.CartItemRepository;
import com.ecommerce.shoppro.repo.OrderItemRepository;
import com.ecommerce.shoppro.repo.OrderRepository;

@RestController 
@RequestMapping("/api/orders") 
@CrossOrigin(origins = "*") 
public class OrderController { 
@Autowired 
private OrderRepository orderRepository; 
@Autowired 
private CartItemRepository cartItemRepository; 
@Autowired 
private OrderItemRepository orderItemRepository; 
@PostMapping("/place/{userId}") 
public ResponseEntity<Order> placeOrder(@PathVariable Long userId) { 
List<CartItem> cartItems = cartItemRepository.findByUserId(userId);
if (cartItems.isEmpty()) { 
return ResponseEntity.badRequest().build(); 
} 
Order order = new Order(); 
order.setUser(new User(userId)); // or fetch user entity 
order.setStatus("PLACED"); 
order.setCreatedAt(LocalDateTime.now()); 
BigDecimal total = BigDecimal.ZERO; 
List<OrderItem> orderItems = new ArrayList<>(); 
for (CartItem cartItem : cartItems) { 
OrderItem item = new OrderItem(); 
item.setOrder(order); 
item.setProduct(cartItem.getProduct()); 
item.setQuantity(cartItem.getQuantity()); 
item.setPrice(cartItem.getProduct().getPrice()); 
total = total.add(item.getPrice().multiply(BigDecimal.valueOf(item.getQuantity()))); 
orderItems.add(item); 
} 
order.setTotalAmount(total); 
order.setOrderItems(orderItems); 
Order savedOrder = orderRepository.save(order); 
orderItemRepository.saveAll(orderItems); 
cartItemRepository.deleteByUserId(userId); // clear cart 
return ResponseEntity.ok(savedOrder); 
} 
} 
@GetMapping("/user/{userId}") 
public List<Order> getUserOrders(@PathVariable Long userId) { 
return orderRepository.findByUserId(userId); 
} 
