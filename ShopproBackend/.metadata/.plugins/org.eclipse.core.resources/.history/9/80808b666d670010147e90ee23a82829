package com.ecommerce.shoppro.controller;

import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ecommerce.shoppro.domain.Role;
import com.ecommerce.shoppro.domain.User;
import com.ecommerce.shoppro.repo.RoleRepository;
import com.ecommerce.shoppro.repo.UserRepository;

@RestController 
@RequestMapping("/api/users") 
@CrossOrigin(origins = "*") 
public class UserController { 
@Autowired 
private UserRepository userRepository; 
@Autowired 
private RoleRepository roleRepository;
@Autowired 
private PasswordEncoder passwordEncoder;

@PostMapping("/register") 
public ResponseEntity<User> register(@RequestBody User user) { 
if (userRepository.findByEmail(user.getEmail()).isPresent()) { 
return ResponseEntity.status(HttpStatus.CONFLICT).build(); // Email already exists 
} 
user.setPassword(passwordEncoder.encode(user.getPassword()));
Role defaultRole=roleRepository.findByName("ROLE_USER").orElseThrow(()-> new RuntimeException("Default role not found"));
user.setRoles(Set.of(defaultRole));

return ResponseEntity.ok(userRepository.save(user)); 
} 

@PostMapping("/login")
public ResponseEntity<?> login(@RequestBody Map<String,String> loginData){
	Optional<User> userOpt= userRepository.findByEmail(loginData.get("email"));
	if(userOpt.isPresent()&&passwordEncoder.matches(loginData.get("password"),userOpt.get().getPassword())) {
		return ResponseEntity.ok(userOpt.get());
	}
	return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
}

@GetMapping("/{id}") 
public ResponseEntity<User> getUser(@PathVariable Long id) { 
return userRepository.findById(id) 
.map(ResponseEntity::ok) 
.orElse(ResponseEntity.notFound().build()); 
} 
} 
